{"ast":null,"code":"import { join } from 'path';\nimport { readdirSync, readFileSync } from 'fs';\nimport matter from 'gray-matter';\nimport md2html from './md2html';\nexport const postsDirectory = join(process.cwd(), '_posts'); // til = Today I Learned\n\nexport const tilsDirectory = join(process.cwd(), '_tils');\nexport function getSlugsFrom(dir) {\n  return readdirSync(dir);\n}\nexport async function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const mdContent = await md2html(content);\n  const items = {};\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = mdContent;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport async function getTILBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(tilsDirectory, `${realSlug}.md`);\n  const fileContents = readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const mdContent = await md2html(content);\n  const items = {};\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = mdContent;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = [], limit) {\n  const slugs = getSlugsFrom(postsDirectory); // console.log(slugs);\n\n  const posts = slugs.map(slug => getPostBySlug(slug, fields)).filter(post => {\n    if (!fields.includes('isPublished')) return true;\n    return post.isPublished;\n  }).sort((post1, post2) => post1.date > post2.data ? '1' : '-1');\n  return limit ? posts.slice(0, limit) : posts;\n}\nexport function getAllTILs(fields = [], limit) {\n  const slugs = getSlugsFrom(tilsDirectory); // console.log(slugs);\n\n  const tils = slugs.map(slug => getTILBySlug(slug, fields)).filter(til => {\n    if (!fields.includes('isPublished')) return true;\n    return til.isPublished;\n  }).sort((til1, til2) => til1.date > til2.data ? '1' : '-1');\n  return limit ? tils.slice(0, limit) : tils;\n}","map":{"version":3,"sources":["/Users/txb/PersonalProject/portfolio/tepy.dev/lib/api.js"],"names":["join","readdirSync","readFileSync","matter","md2html","postsDirectory","process","cwd","tilsDirectory","getSlugsFrom","dir","getPostBySlug","slug","fields","realSlug","replace","fullPath","fileContents","data","content","mdContent","items","forEach","field","getTILBySlug","getAllPosts","limit","slugs","posts","map","filter","post","includes","isPublished","sort","post1","post2","date","slice","getAllTILs","tils","til","til1","til2"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport { readdirSync, readFileSync } from 'fs';\nimport matter from 'gray-matter';\nimport md2html from './md2html';\n\nexport const postsDirectory = join(process.cwd(), '_posts');\n// til = Today I Learned\nexport const tilsDirectory = join(process.cwd(), '_tils');\n\nexport function getSlugsFrom(dir) {\n  return readdirSync(dir);\n}\n\nexport async function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = readFileSync(fullPath, 'utf8');\n  const { data, content } = matter(fileContents);\n  const mdContent = await md2html(content);\n  const items = {};\n\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n    if (field === 'content') {\n      items[field] = mdContent;\n    }\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport async function getTILBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(tilsDirectory, `${realSlug}.md`);\n  const fileContents = readFileSync(fullPath, 'utf8');\n  const { data, content } = matter(fileContents);\n  const mdContent = await md2html(content);\n\n  const items = {};\n\n  fields.forEach((field) => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n    if (field === 'content') {\n      items[field] = mdContent;\n    }\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n\n  return items;\n}\n\nexport function getAllPosts(fields = [], limit) {\n  const slugs = getSlugsFrom(postsDirectory);\n  // console.log(slugs);\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug, fields))\n    .filter((post) => {\n      if (!fields.includes('isPublished')) return true;\n      return post.isPublished;\n    })\n    .sort((post1, post2) => (post1.date > post2.data ? '1' : '-1'));\n  return limit ? posts.slice(0, limit) : posts;\n}\n\nexport function getAllTILs(fields = [], limit) {\n  const slugs = getSlugsFrom(tilsDirectory);\n  // console.log(slugs);\n  const tils = slugs\n    .map((slug) => getTILBySlug(slug, fields))\n    .filter((til) => {\n      if (!fields.includes('isPublished')) return true;\n      return til.isPublished;\n    })\n    .sort((til1, til2) => (til1.date > til2.data ? '1' : '-1'));\n  return limit ? tils.slice(0, limit) : tils;\n}\n"]},"metadata":{},"sourceType":"module"}