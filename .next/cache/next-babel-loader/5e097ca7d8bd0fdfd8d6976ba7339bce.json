{"ast":null,"code":"var _jsxFileName = \"/Users/txb/PersonalProject/portfolio/tepy.dev/src/components/DateFormater.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { parseISO, format } from 'date-fns';\nexport default function DateFormater(_ref) {\n  let {\n    dateStr\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"dateStr\"]);\n\n  const date = parseISO(dateStr);\n  return __jsx(\"time\", _extends({\n    dateTime: dateStr,\n    className: `mt - 1 text - sm block text - gray - 600`\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }), format(date, 'LLLL\td, yyyy'));\n}","map":{"version":3,"sources":["/Users/txb/PersonalProject/portfolio/tepy.dev/src/components/DateFormater.js"],"names":["parseISO","format","DateFormater","dateStr","rest","date"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,UAAjC;AAEA,eAAe,SAASC,YAAT,OAA4C;AAAA,MAAtB;AAAEC,IAAAA;AAAF,GAAsB;AAAA,MAARC,IAAQ;;AACzD,QAAMC,IAAI,GAAGL,QAAQ,CAACG,OAAD,CAArB;AACA,SACE;AACE,IAAA,QAAQ,EAAEA,OADZ;AAEE,IAAA,SAAS,EAAG;AAFd,KAGMC,IAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKGH,MAAM,CAACI,IAAD,EAAO,cAAP,CALT,CADF;AASD","sourcesContent":["import { parseISO, format } from 'date-fns';\n\nexport default function DateFormater({ dateStr, ...rest }) {\n  const date = parseISO(dateStr);\n  return (\n    <time\n      dateTime={dateStr}\n      className={`mt - 1 text - sm block text - gray - 600`}\n      {...rest}\n    >\n      {format(date, 'LLLL\td, yyyy')}\n    </time>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}